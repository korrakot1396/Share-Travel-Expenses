{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _reactNative = require(\"react-native\");\n\nvar ImageResizerAndroid = _reactNative.NativeModules.ImageResizerAndroid;\nvar exportObject = {};\n\nif (_reactNative.Platform.OS === 'android') {\n  exportObject = {\n    createResizedImage: function createResizedImage(imagePath, newWidth, newHeight, compressFormat, quality) {\n      var rotation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n      var outputPath = arguments.length > 6 ? arguments[6] : undefined;\n      var keepMeta = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;\n      return new Promise(function (resolve, reject) {\n        ImageResizerAndroid.createResizedImage(imagePath, newWidth, newHeight, compressFormat, quality, rotation, outputPath, keepMeta, resolve, reject);\n      });\n    }\n  };\n} else {\n  exportObject = {\n    createResizedImage: function createResizedImage(path, width, height, format, quality) {\n      var rotation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n      var outputPath = arguments.length > 6 ? arguments[6] : undefined;\n      var keepMeta = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;\n\n      if (format !== 'JPEG' && format !== 'PNG') {\n        throw new Error('Only JPEG and PNG format are supported by createResizedImage');\n      }\n\n      return new Promise(function (resolve, reject) {\n        _reactNative.NativeModules.ImageResizer.createResizedImage(path, width, height, format, quality, rotation, outputPath, keepMeta, function (err, response) {\n          if (err) {\n            return reject(err);\n          }\n\n          resolve(response);\n        });\n      });\n    }\n  };\n}\n\nvar _default = exportObject;\nexports.default = _default;","map":{"version":3,"sources":["C:/ShareTravelExpenses/node_modules/react-native-image-resizer/index.js"],"names":["ImageResizerAndroid","NativeModules","exportObject","Platform","OS","createResizedImage","imagePath","newWidth","newHeight","compressFormat","quality","rotation","outputPath","keepMeta","Promise","resolve","reject","path","width","height","format","Error","ImageResizer","err","response"],"mappings":";;;;;AAAA;;AAEA,IAAMA,mBAAmB,GAAGC,2BAAcD,mBAA1C;AAEA,IAAIE,YAAY,GAAG,EAAnB;;AAEA,IAAIC,sBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7BF,EAAAA,YAAY,GAAG;AACbG,IAAAA,kBAAkB,EAAE,4BAClBC,SADkB,EAElBC,QAFkB,EAGlBC,SAHkB,EAIlBC,cAJkB,EAKlBC,OALkB,EASf;AAAA,UAHHC,QAGG,uEAHQ,CAGR;AAAA,UAFHC,UAEG;AAAA,UADHC,QACG,uEADQ,KACR;AACH,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtChB,QAAAA,mBAAmB,CAACK,kBAApB,CACEC,SADF,EAEEC,QAFF,EAGEC,SAHF,EAIEC,cAJF,EAKEC,OALF,EAMEC,QANF,EAOEC,UAPF,EAQEC,QARF,EASEE,OATF,EAUEC,MAVF;AAYD,OAbM,CAAP;AAcD;AAzBY,GAAf;AA2BD,CA5BD,MA4BO;AACLd,EAAAA,YAAY,GAAG;AACbG,IAAAA,kBAAkB,EAAE,4BAACY,IAAD,EAAOC,KAAP,EAAcC,MAAd,EAAsBC,MAAtB,EAA8BV,OAA9B,EAAsF;AAAA,UAA/CC,QAA+C,uEAApC,CAAoC;AAAA,UAAjCC,UAAiC;AAAA,UAArBC,QAAqB,uEAAV,KAAU;;AACxG,UAAIO,MAAM,KAAK,MAAX,IAAqBA,MAAM,KAAK,KAApC,EAA2C;AACzC,cAAM,IAAIC,KAAJ,CAAU,8DAAV,CAAN;AACD;;AAED,aAAO,IAAIP,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCf,mCAAcqB,YAAd,CAA2BjB,kBAA3B,CACEY,IADF,EAEEC,KAFF,EAGEC,MAHF,EAIEC,MAJF,EAKEV,OALF,EAMEC,QANF,EAOEC,UAPF,EAQEC,QARF,EASE,UAACU,GAAD,EAAMC,QAAN,EAAmB;AACjB,cAAID,GAAJ,EAAS;AACP,mBAAOP,MAAM,CAACO,GAAD,CAAb;AACD;;AAEDR,UAAAA,OAAO,CAACS,QAAD,CAAP;AACD,SAfH;AAiBD,OAlBM,CAAP;AAmBD;AAzBY,GAAf;AA2BD;;eAEctB,Y","sourcesContent":["import { NativeModules, Platform } from 'react-native';\n\nconst ImageResizerAndroid = NativeModules.ImageResizerAndroid;\n\nlet exportObject = {};\n\nif (Platform.OS === 'android') {\n  exportObject = {\n    createResizedImage: (\n      imagePath,\n      newWidth,\n      newHeight,\n      compressFormat,\n      quality,\n      rotation = 0,\n      outputPath,\n      keepMeta = false\n    ) => {\n      return new Promise((resolve, reject) => {\n        ImageResizerAndroid.createResizedImage(\n          imagePath,\n          newWidth,\n          newHeight,\n          compressFormat,\n          quality,\n          rotation,\n          outputPath,\n          keepMeta,\n          resolve,\n          reject\n        );\n      });\n    },\n  };\n} else {\n  exportObject = {\n    createResizedImage: (path, width, height, format, quality, rotation = 0, outputPath, keepMeta = false) => {\n      if (format !== 'JPEG' && format !== 'PNG') {\n        throw new Error('Only JPEG and PNG format are supported by createResizedImage');\n      }\n\n      return new Promise((resolve, reject) => {\n        NativeModules.ImageResizer.createResizedImage(\n          path,\n          width,\n          height,\n          format,\n          quality,\n          rotation,\n          outputPath,\n          keepMeta,\n          (err, response) => {\n            if (err) {\n              return reject(err);\n            }\n\n            resolve(response);\n          }\n        );\n      });\n    },\n  };\n}\n\nexport default exportObject;\n"]},"metadata":{},"sourceType":"script"}